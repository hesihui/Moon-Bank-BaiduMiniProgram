/**
 * @file collapse
 * @author v_zhaoxinggang
 * @date 2020-08-07
 */

import {isIos} from './../../common/utils/index';

/* global Component, swan */

Component({ // eslint-disable-line
    externalClasses: [
        'smt-collapse-header',
        'smt-header-title',
        'smt-header-sub-title',
        'smt-content-box',
        'smt-content-item'
    ],

    properties: {
        // horizontal 水平布局、vertical 上下布局
        headerType: {
            type: String,
            value: 'vertical'
        },

        // 展开收起状态，展开为 true，收起为 false
        spread: {
            type: Boolean,
            observer(val) {
                this.setData('isSpread', val);
                val && this.setData('contentHeight', 'auto');
            },
            value: false
        },

        // 主标题文案
        title: {
            type: String,
            value: ''
        },

        // 副标题文案
        subTitle: {
            type: String,
            value: ''
        },

        // 展开面板内容列表
        list: {
            type: Array,
            value: []
        },

        // header 区是否有下边框
        headerBorder: {
            type: Boolean,
            value: true
        },

        // 折叠动画时长
        animationTime: {
            type: Number,
            value: 0
        },

        // 收起时内容区的高度 单位 rpx
        spreadHeight: {
            type: String,
            value: '1px'
        }
    },

    data: {
        isIos,

        // 展开收起状态，展开为 true，收起为 false
        isSpread: false,

        // 面板的高度
        contentHeight: 0,

        // header 下边框 className
        headerBorderClass: '',

        time: 'transition: height 0s'
    },

    lifetimes: {
        ready() {
            swan.createSelectorQuery()
                .in(this)
                .select('.collapse-content-inner')
                .boundingClientRect(res => {
                    this.setData('contentHeight', res ? res.height : 'auto', () => {
                        this.setData('time', `transition: height ${this.data.animationTime / 1000}s`);
                    });
                }).exec();
        },

        created() {
            this.setData('isSpread', this.data.spread);
        }
    },

    methods: {
        /**
         * 面板展开收起事件
         */
        spreadEvent() {
            const isSpread = !this.data.isSpread;
            this.setData({isSpread});
            this.triggerEvent('spread', {spread: isSpread});
        }
    }
});
