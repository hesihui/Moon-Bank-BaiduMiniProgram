/**
 * @file 锚点组件js
 * @author chaiyixin (chaiyixin@baidu.com)
 */
/* globals Component,swan */
import AnchorLogic from './util.js';
Component({// eslint-disable-line
    options: {
        addGlobalClass: true
    },
    properties: {
        mode: { // 锚点图片模式
            type: String, // heightFix:按高宽比例，高度不变自适应; widthFix:按高宽比例，宽度不变自适应；
            value: 'widthFix'
        },
        url: { // 图片地址
            type: String,
            value: ''
        },
        originWidth: { // 图片原始宽度
            type: Number,
            value: 0
        },
        originHeight: { // 图片原始高度
            type: Number,
            value: 0
        },
        showAnchor: { // 是否默认展开锚点
            type: Boolean,
            value: true
        },
        maxFontCount: { // 允许显示的标签最大字数，多余省略,;position为空时用于计算左右方向
            type: Number,
            value: 6
        },
        textColor: { // 锚点文本颜色
            type: String,
            value: '#fff'
        },
        tagColor: { // 锚点标签背景色
            type: String,
            value: 'rgba(0,0,0,.6)'
        },
        fontSize: { // 锚点字号大小
            type: Number,
            value: 12
        },
        roundSize: { // 锚点圆直径,与锚点连线长度一致
            type: Number,
            value: 10
        },
        // 是否需要控制器
        needHandler: {
            type: Boolean,
            value: true
        },
        handlerSize: {
            type: Number,
            value: 15
        },
        list: { // 锚点数组
            type: Array,
            value: []
        }
    },
    data: {
        imgRadio: 0,
        visableAnchor: true,
        conSize: {},
        realList: [],
        quot: '"',
        svgColor: ''
    },
    created() {
        const {showAnchor} = this.properties;
        this.setData({
            visableAnchor: showAnchor
        });
    },
    // 私有数据，可用于模版渲染
    attached() {
        const {originWidth, originHeight, list, textColor, mode} = this.properties;
        this.getRadio().then(radio => {
            this.setData({
                imgRadio: radio,
                conSize: AnchorLogic.getConSize(radio, originWidth, originHeight, mode),
                realList: AnchorLogic.getAnchorList(list, this.properties, radio),
                svgColor: AnchorLogic.getSvgColor(textColor)
            });
        });
    },
    methods: {
        // 获取 展示大小/原图大小 的比例
        getRadio() {
            const {originWidth, originHeight, mode} = this.properties;
            return new Promise((resolve, reject) => {
                this.createSelectorQuery().select('.anchor-img').boundingClientRect(rect =>{
                    if (rect) {
                        resolve(mode === 'widthFix' || originWidth > originHeight
                        ? rect.width / originWidth : rect.height / originHeight);
                    } else {
                        resolve(0);
                    }
                }).exec();
            });
        },
        // 控制锚点显示与隐藏
        changeVisable() {
            this.setData({
                visableAnchor: !this.data.visableAnchor
            });
        },
        // 点击某一锚点，state是当前锚点数据
        activeAnchor(e) {
            const state = e.currentTarget.dataset.anchor.state;
            this.triggerEvent('active', {state});
        }
    }
});