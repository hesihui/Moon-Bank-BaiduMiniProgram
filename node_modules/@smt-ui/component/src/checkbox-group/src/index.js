/**
 * @file CheckBoxGroup
 * @author zhangwen22 (zhangwen22@baidu.com)
 * @desc 多选组件
 */

import {isIos} from '../../common/utils/index';
import {COLOR_TIPS} from '../../common/style/color';
/* global Component */
Component({
    externalClasses: ['checkbox-group-class'], // eslint-disable-line
    properties: {
        // 多选项组件内容数组
        options: {
            type: Array,
            value: []
        },
        // 布局有几列
        column: {
            type: Number,
            value: 1
        },
        // options数组中的key
        optionKey: {
            type: String,
            value: 'name'
        },
        // 已选的值
        value: {
            type: Array,
            value: [],
            observer: function () {
                this.createCheckGroup();
            }
        },
        // checkbox内联样式
        itemStyle: {
            type: Object,
            value: {}
        },
        // checkbox选中时的icon样式
        iconStyle: {
            type: Object,
            value: {}
        },
        // 选中时的文字颜色
        activeTextColor: {
            type: String,
            value: COLOR_TIPS
        },
        // 选中时的icon颜色
        activeIconColor: {
            type: String,
            value: COLOR_TIPS
        }
    },
    data: {
        // 存处理之后的传入options
        currRowOptions: [],
        // 是否为ios
        isIos
    },
    created() {
        this.createCheckGroup();
    },

    /**
     * 监听checkbox派发出来的change事件
     *
     * @param {Object} event change事件对象
     */
    itemChange(event) {
        const {checked, val} = event.detail;
        let value = this.data.value;
        const valueIndex = value.indexOf(val);
        checked ? value.push(val) : (valueIndex > -1 && value.splice(valueIndex, 1));
        this.setData({
            value
        });
        this.triggerEvent('change', value);
    },

    /**
     * 初始化options
     */
    createCheckGroup() {
        const {options, value, column} = this.data;
        let currRowOptions = [];
        options.forEach((option, i) => {
            !(i % column) && currRowOptions.push([]);
            const last = currRowOptions.length - 1;
            option.checked = (value || []).includes(option.value);
            currRowOptions[last].push(option);
        });
        this.setData({
            currRowOptions
        });
    }
});
