/**
 * @file filter-header组件
 * @author zhangwen22(zhangwen22@baidu.com)
 */
import events from '../../common/utils/behavior';
import {getCurrentPage} from '../../common/utils/index';
import {COLOR_TIPS, COLOR_BLACK} from '../../common/style/color';
/* global Component */
Component({
    behaviors: [events],
    externalClasses: [ // eslint-disable-line
        'filter-body-class',
        'filter-singlelist-class',
        'filter-singlelist-item-class',
        'filter-singlelist-item-text-class',
        'filter-cascade-class',
        'filter-cascade-column-class',
        'filter-cascade-column-item-class',
        'filter-cascade-column-item-text-class',
        'filter-checkbox-group-class',
        'checkbox-group-class',
        'check-box-class'],
    properties: {
        // 筛选器ID
        filterId: {
            type: String,
            value: ''
        },
        // 筛选项数组，数组格式
        selections: {
            type: Array,
            value: [],
            observer(n) {
                this.setData('filtersValue', n.map(({text, value}) => ({text, value})));
            }
        },
        // 高亮时的文字和icon颜色
        activeTextColor: {
            type: String,
            value: COLOR_TIPS
        },
        // 多选组件选中时的选项背景颜色
        activeIconColor: {
            type: String,
            value: COLOR_TIPS
        },
        // 多选组件选中时的选项背景颜色
        activeBgColor: {
            type: String,
            value: COLOR_TIPS
        },
        // 单选和级联默认状态的文字和颜色
        fontColor: {
            type: String,
            value: COLOR_BLACK
        },
        // 单选和级联默认状态的文字颜色
        activeColor: {
            type: String,
            value: COLOR_TIPS
        }
    },
    data: {
        // 当前选中的filter
        filterIdx: -1,
        // 对应filter的列表
        filtersValue: [],
        // 上一个激活的filter 索引
        lastFilterIdx: -1,
        // 上一次选中的项
        lastSelItem: {},
        // 命名空间
        ns: ''
    },

    created() {
        const {selections, filterId} = this.data;
        if (!Array.isArray(selections)) {
            throw 'selections prop必须是数组';
        }
        // 初始化默认值
        this.setData({
            ns: `${getCurrentPage().uri}_${filterId}`,
            filtersValue: selections.map(({text, value}) => ({text, value}))
        });
        // 监听filterIdx更新，说明已经点击过筛选头部，需要展开下拉内容
        this.eventsEmitter.onMessage(`setFilterIdx.${this.data.ns}`, res => {
            let {filterIdx, lastFilterIdx} = res;
            this.setData({
                filterIdx,
                lastFilterIdx
            });
        });
        // 监听cancelSelect，关闭下拉内容
        this.eventsEmitter.onMessage(`cancelSelect.${this.data.ns}`, () => this.cancelSelect());
    },

    /**
     * 异步执行组件expand的方法
     *
     * @param {Number} index 筛选组件的下标
     */
    async expandSelect(index) {
        if (index < 0) {
            return;
        }
        try {
            const content = await this.selContent(index);
            typeof content.expand === 'function' && content.expand();
        }
        catch (err) {
            console.error(err);
        }
    },

    /**
     * 点击下拉某一项时收起下拉框
     *
     * @param {Boolean} mask 是否点击遮罩层
     */
    async cancelSelect(mask) {
        if (mask) {
            this.broadcast({
                type: `filterClose.${this.data.ns}`
            });
        }
        const index = this.data.lastFilterIdx;
        if (index < 0) {
            return;
        }
        this.triggerEvent('cancel', index);
    },

    /**
     * 点击下拉选项中的内容
     *
     * @param {Object} event 点击事件对象
     */
    itemChange(event) {
        let item = event.detail;
        let {filterIdx, lastSelItem, fillBackIdx, filtersValue} = this.data;
        item.fillback && (filterIdx = fillBackIdx);
        // 如果点击内容和上一个一样，直接返回
        if (filterIdx === lastSelItem.filterIdx && this.itemIdxEqual(item, lastSelItem.selection)) {
            return this.cancelSelect(true);
        }
        const selItem = {
            filterIdx,
            selection: item
        };
        // 选中下拉某一项后，更新filtersValue
        filtersValue.splice(filterIdx, 1, item);
        this.setData({
            filtersValue,
            lastSelItem: selItem
        });
        // 广播，告诉大家筛选内容改变了
        this.broadcast({
            type: `filterValChange.${this.data.ns}`,
            selItem
        });
    },

    /**
     * 比较下拉列表选值是否相同
     *
     * @param {Object} currSln 当前item对象
     * @param {Object} lastSln 上次item对象
     */
    itemIdxEqual(currSln, lastSln) {
        // 展开的筛选类型不同也直接返回
        if (!currSln || !lastSln || currSln.type !== lastSln.type) {
            return false;
        }
        let currSlnIdx = null;
        let lastSlnIdx = null;
        if (currSln.type === 'singleList') {
            lastSlnIdx = lastSln && lastSln.index;
            currSlnIdx = currSln && currSln.index;
        }
        else if (currSln.type === 'cascade') {
            lastSlnIdx = lastSln && JSON.stringify(lastSln.casIndex);
            currSlnIdx = currSln && JSON.stringify(currSln.casIndex);
        }
        else {
            lastSlnIdx = lastSln && JSON.stringify(lastSln.value);
            currSlnIdx = currSln && JSON.stringify(currSln.value);
        }
        return lastSlnIdx === currSlnIdx;
    },

    /**
     * 动态回填数据
     *
     * @param {String} index 需要回填的筛选ID
     * @param {String} value 需要回填的数据
     */
    setValue(index, value) {
        swan.createSelectorQuery().in(this)
        .selectAll('.select-list > .filter-content')
        .fields({id: true}, idList => {
            try {
                let current = idList[index];
                current = current && current.id && this.selectComponent(current.id);
                if (current && typeof current.setValue === 'function') {
                    this.setData('fillBackIdx', index);
                    current.setValue(value);
                }
            }
            catch (err) {
                console.error('选择自定义组件错误: ', err);
            }
        }).exec();
    }
});
