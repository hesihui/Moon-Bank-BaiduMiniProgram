/**
 * @file filter-header组件
 * @author zhangwen22(zhangwen22@baidu.com)
 */
import events from '../../common/utils/behavior';
import {getCurrentPage} from '../../common/utils/index';
import {upx2dpx} from '../../common/utils/px';
import {COLOR_TIPS, COLOR_BLACK, COLOR_GRAY_2, COLOR_GRAY_4} from '../../common/style/color';
/* global Component, swan */
Component({
    behaviors: [events],
    externalClasses: [ // eslint-disable-line
        'filter-header-class',
        'filter-btn-class',
        'filter-btn-text-class'
    ],
    properties: {
        // 筛选器ID
        filterId: {
            type: String,
            value: ''
        },
        // 筛选项数组，数组格式
        selections: {
            type: Array,
            value: [],
            observer() {
                this.updateComputedData();
            }
        },
        // 是否展现下边线
        border: {
            type: Boolean,
            value: true
        },
        // 高亮时的文字和icon颜色
        activeColor: {
            type: String,
            value: COLOR_TIPS
        },
        // 默认状态的文字颜色
        fontColor: {
            type: String,
            value: COLOR_BLACK
        },
        // 默认状态的icon颜色
        iconColor: {
            type: String,
            value: COLOR_GRAY_4
        },
        // 禁用状态的文字颜色
        disColor: {
            type: String,
            value: COLOR_GRAY_2
        }
    },
    data: {
        // 当前选中的filter下标
        filterIdx: -1,
        // 上一个选中的filter下标
        lastFilterIdx: -1,
        // 所有filter的值
        filtersValue: [],
        // 命名空间
        ns: '',
        // 标题宽度的数组
        textWidths: []
    },

    created() {
        // 只留筛选头内容数组
        let filtersValue = [];
        // 筛选头宽度定制
        let textWidths = [];
        this.data.selections.forEach(item => {
            const {textWidth, text, value} = item;
            filtersValue.push({text, value});
            textWidths.push(textWidth ? upx2dpx(textWidth) + 'px' : '');
        });
        // 初始化默认值
        this.setData({
            ns: `${getCurrentPage().uri}_${this.data.filterId}`,
            filtersValue,
            textWidths
        });
        // 监听下拉内容的改变
        this.eventsEmitter.onMessage(`filterValChange.${this.data.ns}`, ({selItem}) => {
            let filtersValue = this.data.filtersValue;
            // 替换改变之后的filtersValue数组
            filtersValue.splice(selItem.filterIdx, 1, selItem.selection);
            this.setData({
                filtersValue
            }, () => {
                this.updateComputedData();
                this.filterClose();
                // 向父组件派发事件
                swan.nextTick(() => this.triggerEvent('select', selItem));
            });
        });
        // 监听下拉内容的收起动作
        this.eventsEmitter.onMessage(`filterClose.${this.data.ns}`, () => this.filterClose());
    },

    /**
     * 更新筛选数据
     */
    updateComputedData() {
        const {filtersValue, selections} = this.data;
        let selected;
        if (!filtersValue.length || !selections.length) {
            selected = [];
        }
        else {
            selected = filtersValue.map(({value}, idx) => {
                if (Array.isArray(value)) {
                    return JSON.stringify(value) === JSON.stringify(selections[idx].value);
                }
                return value === selections[idx].value;
            });
        }
        this.setData({
            selected,
            cmptFiltersValue: this.data.filtersValue
        });
    },

    /**
     * 给body传选中的filterIdx，实现filter列表显/隐
     *
     * @param {Number} index 第几个筛选头
     * @param {Number} lastFilterIdx 上次点击的是第几个筛选头
     */
    setFilterIdx(filterIdx, lastFilterIdx = this.lastFilterIdx) {
        this.broadcast({
            type: `setFilterIdx.${this.data.ns}`,
            filterIdx,
            lastFilterIdx
        });
    },

    /**
     * 收起下拉内容，数据初始化
     */
    filterClose() {
        const {filterIdx, lastFilterIdx} = this.data;
        const payload = {
            expand: false,
            filterIdx,
            lastFilterIdx
        };
        this.setFilterIdx(-1, lastFilterIdx);
        this.setData({
            filterIdx: -1
        }, () => {
            // 向父组件派发收起事件
            this.triggerEvent('expand', payload);
        });
    },

    /**
     * 点击筛选按钮，收起/展开筛选器
     *
     * @param {Object} event 点击事件对象
     */
    btnHdl(event) {
        let index = event.currentTarget.dataset.index;
        let idx = this.data.filterIdx;
        // 点击的按钮和传入的筛选ID不一致时，展开下拉内容
        if (idx !== index) {
            const payload = {
                expand: true,
                filterIdx: index,
                lastFilterIdx: idx
            };
            // 像父组件派发展开事件
            this.triggerEvent('expand', payload);
            this.setFilterIdx(index, this.data.lastFilterIdx);
            // 取消选择：1. 点不同的filter-btn 2. 点当前展开的btn 3. 点蒙层
            if (idx !== -1) {
                this.broadcast({
                    type: `cancelSelect.${this.data.ns}`
                });
            }
            this.setData({
                filterIdx: index,
                lastFilterIdx: index
            });
        }
        else {
            this.filterClose();
            this.broadcast({
                type: `cancelSelect.${this.data.ns}`
            });
        }
    }
});
