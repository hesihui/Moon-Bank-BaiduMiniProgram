/**
 * @file 级联组件
 * @author zhangwen22(zhangwen22@baidu.com)
 */

 /* global swan */
Component({ // eslint-disable-line
    externalClasses: ['cascade-picker', 'cascade-label', 'cascade-content', 'cascade-picker-content'],
    properties: {
        // 多级选择的内容数组
        range: {
            type: Array,
            value: [],
            observer() {
                this.initValue();
            }
        },
        // 左侧文字
        label: {
            type: String,
            value: ''
        },
        // 左侧文字宽度
        labelWidth: {
            type: String,
            value: '4em'
        },
        // 默认提示
        placeholder: {
            type: Array,
            value: []
        },
        // picker选中时的下标
        value: {
            type: Array,
            value: [],
            observer(newVal) {
                this.initValue(newVal);
            }
        },
        // range中一个对象的key
        rangeKey: {
            type: String,
            value: ''
        },
        // 是否禁用
        disabled: {
            type: Boolean,
            value: false
        },
        // 点击picker但未选择时的提示
        tips: {
            type: Array,
            value: []
        },
        // label是否显示其他颜色
        changeLabelColor: {
            type: Boolean,
            value: false
        },
        // errStatus为true时展示的颜色
        labelColor: {
            type: String,
            value: '#c40311'
        },
        // 是否有下边框线
        noborder: {
            type: Boolean,
            value: false
        }

    },

    data: {
        // 当前选择的值
        value: '',
        // 选择之后的value数组
        content: [],
        // 选择之后的新value
        newValue: ''
    },

    methods: {
        /**
         * 获取picker选中的内容
         *
         * @param {Array} newValue picker选中是的下标
         */
        initValue(newValue) {
            const {range, rangeKey} = this.data;
            let options = [];
            if (newValue) {
                range.forEach((item, index) => {
                    if (range[index][newValue[index]]) {
                        options.push(range[index][newValue[index]][rangeKey]);
                    }
                });
                this.setData('content', options);
            }
        },

        /**
         * picker选中的事件
         *
         * @param {Object} e picker事件选择对象
         */
        selectorChange(e) {
            const {index, range: options} = e.target.dataset;
            const currentValue = e.detail.value;
            const value = this.data.value;
            if ((value[index] === currentValue) || (!options || options && options.length === 0)) {
                return;
            }
            value[index] = currentValue;
            let newValue = value.slice(0, index + 1);
            this.setData('value', newValue);
            this.initValue(newValue);
            this.triggerEvent('change', {
                value: newValue
            });
        },

        /**
         * 点击picker但未选择
         *
         * @param {Object} e picker事件选择对象
         */
        tap(e) {
            let index = e.currentTarget.dataset.index;
            if (index !== this.data.value.length
                && !this.data.disabled
                && !this.data.content[2]
                && !this.data.content[index]) {
                swan.showToast({
                    title: this.data.tips[this.data.value.length],
                    icon: 'none'
                });
            }
        }
    }
});
