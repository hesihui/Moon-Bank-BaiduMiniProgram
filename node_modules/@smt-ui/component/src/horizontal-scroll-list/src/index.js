/**
 * @file horizontal-scroll-list
 * @author v_zhaoxinggang
 * @date 2020-08-17
 */

import {isIos} from './../../common/utils/index';

/* global swan */

Component({ // eslint-disable-line
    externalClasses: [
        'smt-left-title',
        'smt-top-title',
        'smt-content-item'
    ],
    properties: {

        // 左侧标题数据
        titleList: {
            type: Object,
            value: []
        },

        // 内容数据
        contentList: {
            type: Array,
            value: [[]]
        },

        // 超出两行截断时提示icon的颜色
        iconColor: {
            type: String,
            value: '#2772fb'
        },

        // 最后一行的背景颜色
        lastRowBg: {
            type: String,
            value: '#fff'
        },

        // 最后一行的字体颜色
        lastRowColor: {
            type: String,
            value: '#000'
        },

        // 最后一行是否展示自定义样式
        lastRowDiff: {
            type: Boolean,
            value: false
        },

        // 标题内容是否精确到字节，超出 24 字节时展示预览 icon
        isByte: {
            type: Boolean,
            value: false
        }
    },

    data: {

        // 是否 ios 系统
        isIos,

        // 根据标题计算出列表的样式
        styles: [],

        // 左侧标题栏是否包含查看预览 icon
        // isIcon: false,

        // 最后一样的样式
        lastTableStyle: ''
    },

    created() {
        this.compoutedStyle();
        const {lastRowBg, lastRowColor, lastRowDiff} = this.data;
        this.setData({lastTableStyle: lastRowDiff ? `background: ${lastRowBg};color: ${lastRowColor}` : ''});
    },

    methods: {

        /**
         * 通过字节数计算每行应该展示的高度
         *
         * @param {Array} list 格式化后用来渲染的二维数组
         */
        compoutedStyle() {
            const styles = [];
            this.data.titleList.forEach((v, i) => {
                const byte = this.getBytes(v);
                styles[i] = {
                    icon: byte > 24,
                    line: byte <= 12 ? 1 : 2
                };
            });
            this.setData({
                styles,
                isIcon: styles.some(i => i.icon)
            });
        },

        /**
         * 计算字符串对应的字节数
         *
         * @param {string} str 原始字符串
         * @return {number} 字符串对应字节数
         */
        getBytes(str) {
            let bytesCount = 0;
            for (let i = 0; i < str.length; i++) {
                if (bytesCount > 24) {
                    return;
                }
                let c = str.charAt(i);

                // 匹配单字节
                if (/^[\u0000-\u00ff]$/.test(c)) {
                    bytesCount += 1;
                }
                else {
                    bytesCount += 2;
                }
            }
            return bytesCount;
        },

        /**
         * 超出文案预览
         *
         * @param {Event} e 事件对象
         */
        showModal(e) {
            swan.showModal({
                content: e.currentTarget.dataset.info,
                confirmText: '我知道了',
                showCancel: false
            });
        },

        /**
         * 滚动到右边，会触发 lower 事件
         */
        lower() {
            this.triggerEvent('lower');
        },

        /**
         * 滚动到左边，会触发 upper 事件
         */
        upper() {
            this.triggerEvent('upper');
        }
    }
});
