"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

/**
 * @file notice-bar
 * @author huangzilong(huangzilong@baidu.com)
 * @date 2020-06-30
 */

/* global swan */
Component({
  // eslint-disable-line
  externalClasses: ['notice-bar-class', 'text-class'],
  properties: {
    // 跑马灯文本
    text: {
      type: String,
      value: '跑马灯:notice-bar',
      observer: function observer() {
        this.init();
      }
    },
    // 背景颜色
    bgColor: {
      type: String,
      value: ''
    },
    // 文字颜色
    textColor: {
      type: String,
      value: ''
    },
    // 自定义 icon
    icon: {
      type: Boolean,
      value: true
    },
    // icon 图标名称
    iconName: {
      type: String,
      value: 'delete'
    },
    // icon 颜色
    iconColor: {
      type: String,
      value: '#fa6400'
    },
    // 滚动状态
    scroll: {
      type: Boolean,
      value: true
    },
    // 滚动延迟时间
    delay: {
      type: Number,
      value: 1
    },
    // 速度：px/s; 默认50
    speed: {
      type: Number,
      value: 50
    }
  },
  data: {
    // 第二轮进入循环
    infinite: false,
    // 容器宽度 判断是否超出开启滚动
    containerWidth: 0,
    // 文本宽度，计算速度
    textWidth: 0,
    // 动画配置
    animationData: null,
    // 展示
    show: true
  },
  methods: {
    /**
     * 获取元素宽度
     *
     * @param {string} selector 选择器
     * @return {Promise} width 返回宽度
     */
    getWidths: function getWidths(selector) {
      var _this = this;

      return new Promise(function (r) {
        return _this.createSelectorQuery()["in"](_this).select(selector).boundingClientRect(function (_ref) {
          var width = _ref.width;
          return r(width);
        }).exec();
      });
    },

    /**
     * 初始化函数
     * 通过字数获取宽度不准，因为
     */
    init: function init() {
      var _this2 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee() {
        var _this2$data, scroll, speed, delay, _ref2, _ref3, containerWidth, textWidth, duration;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _this2$data = _this2.data, scroll = _this2$data.scroll, speed = _this2$data.speed, delay = _this2$data.delay; // 不开启滚动，则退出

                if (scroll) {
                  _context.next = 3;
                  break;
                }

                return _context.abrupt("return");

              case 3:
                _context.next = 5;
                return _this2.getWidths('.notice-bar .text-container');

              case 5:
                _context.t0 = _context.sent;
                _context.next = 8;
                return _this2.getWidths('.notice-bar .text-container .text');

              case 8:
                _context.t1 = _context.sent;
                _context.next = 11;
                return [_context.t0, _context.t1];

              case 11:
                _ref2 = _context.sent;
                _ref3 = (0, _slicedToArray2["default"])(_ref2, 2);
                containerWidth = _ref3[0];
                textWidth = _ref3[1];
                duration = +(textWidth / speed * 1000).toFixed(2);

                _this2.setData({
                  textWidth: textWidth,
                  containerWidth: containerWidth
                }, function () {
                  if (textWidth > containerWidth) {
                    setTimeout(function () {
                      return _this2.genAnimate(duration, textWidth);
                    }, delay * 1000);
                  }
                });

              case 17:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    },

    /**
     * 生成动画
     *
     * @param {number} duration 动画时长
     * @param {number} distance 元素文本宽度
     */
    genAnimate: function genAnimate(duration, distance) {
      var _this3 = this;

      // 须先复位
      var animation = swan.createAnimation({
        duration: 0
      });
      animation.translate3d(0, 0, 0).step();
      this.setData({
        animationData: animation["export"]()
      });
      setTimeout(function () {
        var animation = swan.createAnimation({
          duration: duration
        });
        animation.translate3d("-".concat(distance, "px"), 0, 0).step();

        _this3.setData({
          animationData: animation["export"]()
        });
      }, 50);
    },

    /**
     * 滚动动画结束回调函数
     */
    aniEndHdl: function aniEndHdl() {
      var _this4 = this;

      var _this$data = this.data,
          textWidth = _this$data.textWidth,
          speed = _this$data.speed,
          containerWidth = _this$data.containerWidth,
          infinite = _this$data.infinite;
      var duration = +((textWidth + containerWidth) / speed * 1000).toFixed(2);

      var fn = function fn() {
        return _this4.genAnimate(duration, textWidth + containerWidth);
      };

      if (!infinite) {
        this.setData({
          infinite: true
        }, fn);
      } else {
        fn();
      }
    },

    /**
     * 删除事件
     */
    closeHdl: function closeHdl() {
      this.setData({
        show: false,
        animationData: null
      });
      this.triggerEvent('close');
    }
  },
  created: function created() {
    this.init();
  }
});